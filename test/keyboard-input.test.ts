import { InputEventType, keepTrackApi } from '@app/keepTrackApi';
import { KeyboardInput } from '@app/singletons/input-manager/keyboard-input';
import { keepTrackContainer } from '../src/container';
import { Singletons } from '../src/interfaces';

// Generated by CodiumAI

/*
 *Code Analysis
 *
 *Main functionalities:
 *The KeyboardInput class handles keyboard input events and provides methods to register callbacks for specific keys. It also interacts with other classes such as UiManager,
 *CatalogManager, OrbitManager, TimeManager, and Camera to perform various actions based on the user's input.
 *
 *Methods:
 *- init(): initializes the class and registers event listeners for keyboard input
 *- registerKeyEvent(key, callback): registers a callback function to be called when the specified key is pressed
 *- registerKeyUpEvent(key, callback): registers a callback function to be called when the specified key is released
 *- registerKeyDownEvent(key, callback): registers a callback function to be called when the specified key is pressed down
 *- keyUpHandler(evt): handles key up events and calls the registered callback functions for the corresponding keys
 *- keyDownHandler(evt): handles key down events and calls the registered callback functions for the corresponding keys
 *- keyHandler(evt): handles key press events and performs various actions based on the pressed key
 *
 *Fields:
 *- isCreateClockDOMOnce_: a boolean flag to keep track of whether the clock DOM element has been created
 *- isCtrlPressed: a boolean flag to keep track of whether the Ctrl key is currently pressed
 *- isShiftPressed: a boolean flag to keep track of whether the Shift key is currently pressed
 *- keyEvents: an array of objects representing registered key events and their corresponding callback functions
 *- keyUpEvents: an array of objects representing registered key up events and their corresponding callback functions
 *- keyDownEvents: an array of objects representing registered key down events and their corresponding callback functions
 */

describe('KeyboardInput_class', () => {
  // Tests that isCtrlPressed and isShiftPressed are false by default
  it('test_ctrl_shift_pressed_defaults', () => {
    const keyboardInput = new KeyboardInput();

    expect(keyboardInput.isCtrlPressed).toBe(false);
    expect(keyboardInput.isShiftPressed).toBe(false);
  });

  // Tests that isCtrlPressed and isShiftPressed are true when the corresponding key is pressed down
  it('test_ctrl_shift_pressed_on_key_down', () => {
    const keyboardInput = new KeyboardInput();

    keyboardInput.init();
    window.dispatchEvent(new KeyboardEvent('keydown', { ctrlKey: true }));
    window.dispatchEvent(new KeyboardEvent('keydown', { shiftKey: true }));
    expect(keyboardInput.isCtrlPressed).toBe(true);
    expect(keyboardInput.isShiftPressed).toBe(true);
  });

  // Tests that isCtrlPressed and isShiftPressed are false when the corresponding key is released
  it('test_ctrl_shift_pressed_on_key_up', () => {
    const keyboardInput = new KeyboardInput();

    keyboardInput.init();
    window.dispatchEvent(new KeyboardEvent('keyup', { ctrlKey: false }));
    window.dispatchEvent(new KeyboardEvent('keyup', { shiftKey: false }));
    expect(keyboardInput.isCtrlPressed).toBe(false);
    expect(keyboardInput.isShiftPressed).toBe(false);
  });

  // Tests that keyHandler does not execute if evt.key is undefined
  it('test_key_handler_undefined_key', () => {
    const keyboardInput = new KeyboardInput();

    keyboardInput.init();
    const uiManagerInstance = { isCurrentlyTyping: true };

    keepTrackContainer.registerSingleton(Singletons.UiManager, uiManagerInstance);
    const evt = { key: null };

    keyboardInput.keyHandler(evt as unknown as KeyboardEvent);
    expect(true).toBe(true);
  });

  // Tests that keyHandler does not execute if uiManagerInstance.isCurrentlyTyping is true
  it('test_key_handler_typing', () => {
    const keyboardInput = new KeyboardInput();

    keyboardInput.init();
    const uiManagerInstance = { isCurrentlyTyping: true };

    keepTrackContainer.registerSingleton(Singletons.UiManager, uiManagerInstance);
    const evt = { key: 'R' };

    keyboardInput.keyHandler(<KeyboardEvent>evt);
    expect(true).toBe(true);
  });

  // Tests that registerKeyEvent adds a new KeyEvent object to the keyEvents array
  it('test_register_key_event', () => {
    const keyboardInput = new KeyboardInput();
    let test = false;

    keyboardInput.init();
    keepTrackApi.on(InputEventType.KeyDown, (key: string) => {
      if (key === 'R') {
        test = true;
      }
    });
    keepTrackApi.emit(InputEventType.KeyDown, 'R', 'KeyR', false, false, false);

    expect(test).toBe(true);
  });
});
